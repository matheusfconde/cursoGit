git clone URI | CLONAR DO SERVIDOR PARA MÁQUINA LOCAL
git tag | para verificar as versões que estão no repositorio.
git checkout | para pegar a versão do código que está disponível no repositório.
git diff v0.1 v0.2 | pegar a diferença dos códigos nas versões

git ls-files | verificar quais arquiviso estão sendo monitorados pelo git
git status | verifica situação da pasta
git add NOME DO ARQUIVO | para adicionar para ser controlado.
git commit -m "Criando Projeto" | dando commit nas alterações

git config user.name "nome"
git config user.email "email@email.com"

git remote add origin https://github.com/matheusfconde/cursoGit.git
<<<<<<< HEAD
git push origin master | envia os dados

git log | historico de commits feitos
git whatchanged | historico de commits feitos com quais arquivos alterados
git whatchanged -p| historico de commits feitos com quais arquivos alterados e suas alteracoes

--

git clone link do repositorio para clonar um repositório ja existente.

aula 4 branchs
git branch | para pegar as branchs locais
git branch -r | lista branchs remotas
git branch -a | lista branchs remotas e locais
git branch NOME | para criar branch
git checkout NOME para trabalhr na branch.]
git branch -t Nome origin/nome | criar branch local amarrada à branch remota.
git branch -d | deleta branchs remota. -D força o delete

git ls | para listar os arquivos do repositório.

git push -u origin design | envia os dados alegando que o branch local é identico ao remoto
git pull origin Design   | pega o conteúdo da branch

git checkout -b NOME | cria a branch e já muda para a branch no momemnto da criação.

Uma sequência de tarefas bem comum referente à cópia de uma branch localizada num repositório remoto é:

Criação de uma branch local com o mesmo nome da branch remota
Mudança para essa nova branch criada
Criação de link entre a branch local e remota
Para evitar toda essa tarefa, o git nos fornece um atalho para evitar esse trabalho todo com uma opção do comando git checkout. Que opção é essa?
com o comando git checkout -t origin/design, todo esse trabalho é feito automaticamente para a branch chamada design.

git push origin :design | Este comando remove a branch remota design.

git fetch origin | Este comando verifica todas as atualizações que foram realizadas no repositório de atalho origin.
=======
git push origin master

O comando git mergetool --tool-help mostra no console uma lista de programas possíveis de ser utilizados.
Dessa lista, pode-se escolher um, instalar no seu computador e
 utilizar através do comando git mergetool -t nome_do_programa.


Se simplesmente jogássemos o conteúdo da branch "desenvolvimento" para a master, poderíamos ter que tratar 
conflitos de vários commits ao mesmo tempo além do log dos commits ficarem confusos. Justamente para evitar 
essa situação, o Git possui o comando git rebase, onde podemos indicar qual é a nova base de commits que deve ser 
utilizada e resolver os conflitos commit por commit. No nosso caso, queremos que a
branch "desenvolvimento" utilize como base de commits a "master" que acabamos de atualizar.


git rebase --continue para continuar o rebase apos o conflito

Para utilizá-lo, primeiro é preciso ir para a branch para a qual se quer levar os commits, no caso, 
a "master" (git checkout master). Em seguida, deve-se dizer para o comando git merge de qual branch virão os
commits novos, que, no caso, é a branch "desenvolvimento". Para isso, basta executar git merge desenvolvimento.



Basicamente, o que o rebase faz é reproduzir, commit por commit, as ações que você desejar. No nosso caso, reproduzindo os novos commits de master no branch feature.

E se você não se sente confortável com o Git Rebase, você pode treinar o Rebase em um branch temporário. Assim, se você fizer besteira, você pode tentar de novo fazendo um checkout do branch original:

git checkout feature
git checkout -b temporary-branch
git rebase -i master
# [Clean up the history]
git checkout master
git merge temporary-branch
>>>>>>> master
